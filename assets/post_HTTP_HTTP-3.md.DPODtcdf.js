import{_ as t,c as r,o as a,a9 as l}from"./chunks/framework.BPywkn1g.js";const c=JSON.parse('{"title":"UDP 和 TCP","description":"","frontmatter":{"title":"UDP 和 TCP","abbrlink":"2873cd15","date":"2024-03-30T22:21:07.000Z","tags":["面试","HTTP"],"categories":[["面试","HTTP"]]},"headers":[],"relativePath":"post/HTTP/HTTP-3.md","filePath":"post/HTTP/HTTP-3.md","lastUpdated":1715773587000}'),i={name:"post/HTTP/HTTP-3.md"},e=l('<h3 id="如何理解udp-和-tcp" tabindex="-1">如何理解UDP 和 TCP <a class="header-anchor" href="#如何理解udp-和-tcp" aria-label="Permalink to &quot;如何理解UDP 和 TCP&quot;">​</a></h3><ul><li><a href="#如何理解udp-和-tcp">如何理解UDP 和 TCP</a><ul><li><a href="#什么是udp">什么是UDP</a><ul><li><a href="#特点">特点</a></li></ul></li><li><a href="#什么是tcp">什么是TCP</a><ul><li><a href="#特点-1">特点</a></li></ul></li><li><a href="#tcp与udp区别">TCP与UDP区别</a><ul><li><a href="#具体描述">具体描述：</a></li><li><a href="#使用场景">使用场景</a></li></ul></li></ul></li><li><a href="#参考">参考</a></li></ul><h4 id="什么是udp" tabindex="-1">什么是UDP <a class="header-anchor" href="#什么是udp" aria-label="Permalink to &quot;什么是UDP&quot;">​</a></h4><p><strong>一句话描述</strong>：UDP 是一种无连接的协议。在发送数据之前，不需要建立连接。此外，UDP 不保证数据包的顺序或是否会到达，这意味着数据包可能会丢失或乱序。</p><h5 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h5><ol><li><p><strong>无连接</strong>：UDP 在发送数据之前，不需要建立连接</p></li><li><p><strong>不可靠</strong>：UDP 不保证数据包的顺序或是否会到达，这意味着数据包可能会丢失或乱序</p></li><li><p><strong>速度快</strong>：由于 UDP 不需要进行连接建立和确认，因此通常比 TCP 更快</p></li><li><p><strong>实时性</strong>：UDP 的无连接和快速特性使其非常适合需要实时性的应用，如视频会议、流媒体和在线游戏</p></li><li><p><strong>无拥塞控制</strong>：因此，网络出现拥塞不会使源主机的发送速率降低（对实时应用有利）</p></li><li><p><strong>报头短</strong>：UDP 的报头只有 8 字节，比 TCP 的报头短，因此开销小（包含字段：源端口号、目标端口号、长度、校验和）</p></li><li><p><strong>一次发送一个报文</strong>：无论应用层交给 UDP 多长的报文，它统统发送，一次发送一个报文</p></li><li><p><strong>接收方处理简</strong>单：对接收方，接到后直接去除首部，交给上面的应用层就完成任务</p></li><li><p><strong>支持广播和多播</strong>：支持一对一、一对多、多对一和多对多的交互通信</p></li></ol><h4 id="什么是tcp" tabindex="-1">什么是TCP <a class="header-anchor" href="#什么是tcp" aria-label="Permalink to &quot;什么是TCP&quot;">​</a></h4><p><strong>一句话描述</strong>：TCP（传输控制协议）是一种面向连接的、可靠的、<strong>基于字节流的传输层通信协议</strong>（数据视为无结构的字节流），它提供了数据的有序传输、错误检查和拥塞控制等功能。</p><h5 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h5><ol><li><p><strong>面向连接</strong>：在数据传输之前，发送方和接收方必须建立一个连接。</p></li><li><p><strong>可靠性</strong>：TCP 提供了一种可靠的服务，它确保数据包将按照其发送的顺序到达。如果数据包丢失或损坏，TCP 将重新发送数据包。</p></li><li><p><strong>有序性</strong>：如果 TCP 报文段在传输过程中发生乱序，TCP 将重新排序，保证接收方接收的数据是有序的。</p></li><li><p><strong>控制拥塞</strong>：当网络出现拥塞时，TCP 会降低数据的发送速率，尽量避免丢包。</p></li><li><p><strong>流量控制</strong>：TCP 通过滑动窗口机制控制数据的发送速率，防止接收方处理不过来。</p></li><li><p><strong>数据完整性</strong>：TCP 提供校验和机制来检查数据在传输过程中是否有错误。</p></li></ol><h4 id="tcp与udp区别" tabindex="-1">TCP与UDP区别 <a class="header-anchor" href="#tcp与udp区别" aria-label="Permalink to &quot;TCP与UDP区别&quot;">​</a></h4><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>效率</td><td>传输效率低</td><td>传输效率高</td></tr><tr><td>双共性</td><td>全双工</td><td>一对一、一对多、多对一、多对多</td></tr><tr><td>流量控制</td><td>滑动窗口</td><td>无</td></tr><tr><td>拥塞控制</td><td>慢开始、拥塞避免、快重传、快恢复</td><td>无</td></tr><tr><td>传输效率</td><td>慢</td><td>快</td></tr></tbody></table><h5 id="具体描述" tabindex="-1">具体描述： <a class="header-anchor" href="#具体描述" aria-label="Permalink to &quot;具体描述：&quot;">​</a></h5><ul><li><p>TCP 是面向连接的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取</p></li><li><p>TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方</p></li><li><p>TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</p></li><li><p>TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信</p></li></ul><h5 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h5><ul><li><p>TCP 使用场景：</p><ul><li><p><strong>Web 应用</strong>：HTTP 和 HTTPS 协议都是基于 TCP 的，因为它们需要可靠的数据传输。</p></li><li><p><strong>邮件传输</strong>：SMTP、POP3 和 IMAP 协议都是基于 TCP 的，因为邮件需要完整且有序的传输。</p></li><li><p><strong>文件传输</strong>：FTP 和 SFTP 协议都是基于 TCP 的，因为文件传输需要数据的完整性和可靠性。</p></li></ul></li><li><p>UDP 使用场景：</p><ul><li><p><strong>实时应用</strong>：例如 VoIP（网络电话）和视频会议，它们需要快速的数据传输，而且可以容忍一些数据丢失。</p></li><li><p><strong>广播和多播应用</strong>：例如 IPTV 和在线游戏，它们需要快速的数据传输，并且可以同时发送给多个接收者。</p></li><li><p><strong>简单查询</strong>：例如 DNS 查询，它只需要发送一小部分数据，并且不需要建立连接。</p></li></ul></li></ul><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><p><a href="https://zh.wikipedia.org" target="_blank" rel="noreferrer">https://zh.wikipedia.org</a><a href="https://blog.csdn.net/Li_Ning_/article/details/52117463" target="_blank" rel="noreferrer">https://blog.csdn.net/Li_Ning_/article/details/52117463</a><a href="https://vue3js.cn/interview/http/UDP_TCP.html" target="_blank" rel="noreferrer">https://vue3js.cn/interview/http/UDP_TCP.html</a></p>',18),o=[e];function d(n,s,p,P,h,T){return a(),r("div",null,o)}const u=t(i,[["render",d]]);export{c as __pageData,u as default};
