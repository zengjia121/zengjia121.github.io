import{_ as i,c as s,o as a,a9 as l}from"./chunks/framework.BPywkn1g.js";const n="/assets/blog-2024-05-07-22-41-25.LledEHFz.png",e="/assets/blog-2024-05-07-22-44-16.Cb2K3Q7o.png",t="/assets/blog-2024-05-08-10-09-02.CWyPu2cs.png",p="/assets/blog-2024-05-08-22-05-47.CeuOtTsM.png",F=JSON.parse('{"title":"模块化工具","description":"","frontmatter":{"title":"模块化工具","tags":["面试","Vue"],"categories":[["面试","Vue"]],"abbrlink":"71b0ff42","date":"2024-05-07T21:52:46.000Z"},"headers":[],"relativePath":"post/Vue/Vue-3.md","filePath":"post/Vue/Vue-3.md","lastUpdated":1715773587000}'),h={name:"post/Vue/Vue-3.md"},k=l(`<h2 id="模块化发展与打包工具" tabindex="-1">模块化发展与打包工具 <a class="header-anchor" href="#模块化发展与打包工具" aria-label="Permalink to &quot;模块化发展与打包工具&quot;">​</a></h2><p>写在前面：乐，没怎么打包过来着</p><ul><li><a href="#模块化发展与打包工具">模块化发展与打包工具</a><ul><li><a href="#什么是模块化">什么是模块化</a></li><li><a href="#模块化发展历程与规范">模块化发展历程与规范</a></li></ul></li><li><a href="#打包工具">打包工具</a><ul><li><a href="#webpack">webpack</a><ul><li><a href="#静态模块">静态模块</a></li><li><a href="#webpack-的核心概念">webpack 的核心概念</a></li><li><a href="#构建流程">构建流程</a></li><li><a href="#编译生命周期钩子">编译生命周期钩子</a></li><li><a href="#loader模块转换器">Loader（模块转换器）</a><ul><li><a href="#loader特性">Loader 特性</a></li><li><a href="#配置loader的方式">配置 Loader 的方式</a></li><li><a href="#常见loader">常见 Loader</a></li></ul></li><li><a href="#plugin">Plugin</a><ul><li><a href="#plugin特性">Plugin 特性</a></li><li><a href="#常见的plugin">常见的 Plugin</a></li></ul></li></ul></li><li><a href="#vite">Vite</a><ul><li><a href="#vite特点">Vite 特点</a></li><li><a href="#vite原理">Vite 原理</a></li></ul></li></ul></li></ul><h3 id="什么是模块化" tabindex="-1">什么是模块化 <a class="header-anchor" href="#什么是模块化" aria-label="Permalink to &quot;什么是模块化&quot;">​</a></h3><p>模块化是一种编程方法，它将大型复杂的程序分解为互相独立的子程序，每个子程序被称为一个模块。每个模块都有特定的功能，并且可以独立完成这个功能。<br> 前端的模块化主要是为了解决命名冲突、文件依赖、复用性等问题。在前端开发中，模块化可以帮助我们更好地组织和管理代码，提高代码的可维护性和可复用性。<br> 具有以下几个优点：</p><ol><li>可维护性：模块化可以将复杂的程序分解为简单的模块，每个模块都有明确的功能。这样，当需要修改某个功能时，只需要修改对应的模块，而不需要理解整个程序。</li><li>可复用性：模块化可以将常用的功能封装为模块，然后在需要的地方导入这个模块。这样，可以避免重复编写相同的代码。</li><li>可测试性：模块化可以将程序分解为独立的模块，每个模块都可以独立测试。这样，可以确保每个模块的功能都是正确的，从而提高整个程序的质量。</li></ol><h3 id="模块化发展历程与规范" tabindex="-1">模块化发展历程与规范 <a class="header-anchor" href="#模块化发展历程与规范" aria-label="Permalink to &quot;模块化发展历程与规范&quot;">​</a></h3><p>发展历程主要包括以下几个阶段：</p><ol><li><p><strong>全局函数</strong>：在早期的 JavaScript 中，所有的变量和函数都是全局的。这种方式容易导致命名冲突和代码难以维护。</p></li><li><p><strong>命名空间</strong>：为了解决全局函数的问题，开发者开始使用命名空间来组织代码。但这种方式仍然无法完全解决命名冲突的问题，而且代码的依赖关系不明确。</p></li><li><p><strong>CommonJS</strong>：Node.js 推出了 CommonJS 模块规范，每个文件就是一个模块，文件内部的所有变量和函数默认都是私有的，对其他文件不可见，通过 <code>require</code> 和 <code>module.exports</code> 来导入和导出模块。这种方式使得 JavaScript 的模块化成为可能，但它主要用于服务器端（由于同步加载），不适合浏览器环境。</p></li><li><p><strong>AMD 和 CMD</strong>：为了解决 CommonJS 在浏览器环境中的问题，社区提出了 <code>AMD（Asynchronous Module Definition</code>和 <code>CMD（Common Module Definition）</code>规范。</p><ul><li><p>AMD（Asynchronous Module Definition）<br> AMD 是 RequireJS 在提出的规范。它支持异步加载模块，即可以在需要的时候再加载模块。AMD 使用 define 函数来定义模块，require 函数来加载模块。<strong>AMD 推崇依赖前置</strong>，在定义模块的时候，需要先指明依赖的模块</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dependency&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 模块代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p>CMD（Common Module Definition）<br> CMD 是 SeaJS 在提出的规范。CMD 也支持异步加载模块，<strong>推崇依赖就近</strong>，即只在需要的地方加载模块。CMD 使用 define 函数来定义模块，require 函数来加载模块</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 加载依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dependency&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 模块代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seajs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul></li><li><p>ES6 模块<br> ES6 模块化是 JavaScript 的官方模块系统，它使用 import 和 export 关键字来导入和导出模块。有以下几个特点：</p><ol><li>静态导入和导出：ES6 模块的导入和导出都是静态的，也就是说不能在运行时改变模块的导入和导出。这使得工具可以在编译时进行优化，如 tree shaking（摇树优化：描述移除 JavaScript 上下文中未引用或未使用代码的过程）</li><li>模块作用域：ES6 模块内部的变量和函数默认都是私有的，如果你想把它们暴露给其他模块，你需要使用 export 关键字。</li><li>支持默认导出和命名导出：ES6 模块支持默认导出和命名导出，这使得你可以导出任意值，如函数、对象、字符串、数字等。<br> 然而，由于浏览器对 ES6 模块的支持程度不一，通常需要通过打包工具将 ES6 模块转换为能在浏览器中运行的代码。</li></ol></li></ol><h2 id="打包工具" tabindex="-1">打包工具 <a class="header-anchor" href="#打包工具" aria-label="Permalink to &quot;打包工具&quot;">​</a></h2><h3 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h3><p><code>webpack</code>是一个用于现代<code>JavaScript</code>应用程序的<strong>静态模块</strong>打包工具。</p><h4 id="静态模块" tabindex="-1">静态模块 <a class="header-anchor" href="#静态模块" aria-label="Permalink to &quot;静态模块&quot;">​</a></h4><p>Webpack 的&quot;静态模块&quot;是指在编译时就能确定模块的依赖关系，以及输入和输出的模块。与动态加载（在运行时确定这些事情）形成对比。<br> 在 Webpack 中，每个文件都被视为一个模块，这些模块通过 import 或 require 语句进行连接。Webpack 会从一个或多个入口文件开始，解析这些文件中的 import 或 require 语句，构建出一个依赖图（dependency graph）。这个依赖图包含了应用程序所需的每个模块，并且所有模块都被打包成一个（或多个）bundle。<br><img src="`+n+'" alt="webpack打包图"> 这种静态的模块结构允许 Webpack 在打包时进行大量优化，如代码分割、懒加载、移除未使用的代码（tree shaking）等。这些优化可以帮助提高应用程序的加载性能和运行性能。</p><h4 id="webpack-的核心概念" tabindex="-1">webpack 的核心概念 <a class="header-anchor" href="#webpack-的核心概念" aria-label="Permalink to &quot;webpack 的核心概念&quot;">​</a></h4><ul><li>entry（入口）：一个可执行模块或者库的入口。定义了打包后的入口文件。</li><li>output（出口）：指示 webpack 如何去输出，以及在哪里输出。</li><li>path: 打包文件存放的绝对路径</li><li>publicPath: 网站运行时的访问路径</li><li>filename: 打包后的文件名</li><li>module（模块）：在 webpack 里，一切皆模块，一个模块对应一个文件。webpack 会从配置的 entry 中开始递归找出所有依赖的模块。</li><li>chunk（代码块）：一个 chunk 由多个 模块 组合而成。可以将可执行的模块和他所依赖的模块组合成一个 chunk ，这就是打包。</li><li>loader（模块转换器）：用于把一个模块原内容按照需求转换成新的内容。例如：es6 转换为 es5，scss 转换为 css 等。</li><li>plugin（扩展）：扩展 webpack 功能的插件。在 webpack 构建的生命周期节点上加入扩展 hook，添加功能。</li></ul><h4 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h4><p><img src="'+e+`" alt="webpack构建流程"></p><ol><li>初始化参数 Webpack 启动时，将从命令行（shell）传入的参数和 webpack.config.js 文件中的配置参数进行合并，初始化出一个 Compiler 对象</li><li>编译<br> 上一步得到的参数初始化 compiler 对象，注册所有配置的插件，插件监听 webpack 构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译</li><li>确定入口<br> 根据配置的 entry 入口，开始解析文件构建的 AST 语法树，找出依赖，递归下去</li><li>编译模块<br> 根据文件类型和 loader 配置，调用所有配置的 loader 对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li><li>完成模块编译并输出 递归完后，得到每个文件结果，包含了每个模块及她们之间的依赖关系，根据 entry 配置生成代码块 chunk</li><li>输出完成<br> 输出所有的 chunk 到系统文件</li></ol><h4 id="编译生命周期钩子" tabindex="-1">编译生命周期钩子 <a class="header-anchor" href="#编译生命周期钩子" aria-label="Permalink to &quot;编译生命周期钩子&quot;">​</a></h4><ul><li>entry-option ：初始化 option</li><li>run：在编译器开始读取记录之前触发</li><li>compile： 真正开始的编译，在创建 compilation 对象之前</li><li>compilation ：生成好了 compilation 对象</li><li>make： 从 entry 开始递归分析依赖，准备对每个模块进行 build</li><li>after-compile： 编译 build 过程结束</li><li>emit ：在将内存中 assets 内容写到磁盘文件夹之前</li><li>after-emit ：在将内存中 assets 内容写到磁盘文件夹之后</li><li>done： 完成所有的编译过程</li><li>failed： 编译失败的时候</li></ul><h4 id="loader-模块转换器" tabindex="-1">Loader（模块转换器） <a class="header-anchor" href="#loader-模块转换器" aria-label="Permalink to &quot;Loader（模块转换器）&quot;">​</a></h4><p>loader 用于对模块的&quot;源代码&quot;进行转换，在 import 或&quot;加载&quot;模块时预处理文件</p><h5 id="loader-特性" tabindex="-1">Loader 特性 <a class="header-anchor" href="#loader-特性" aria-label="Permalink to &quot;Loader 特性&quot;">​</a></h5><ul><li>转换文件<br> Loader 是用来对<strong>模块源代码进行转换</strong>。Webpack 本身只能处理 JavaScript，但是 loader 能够让 Webpack 处理那些非 JavaScript 文件（例如 CSS，LESS，TypeScript 等）。Loader 可以将这些文件转换为有效的模块，并且可以添加到依赖图中。</li><li>链式处理<br> Loader 可以链式调用。一组链式的 Loader 将<strong>按照相反的顺序执行</strong>。Loader 链中的第一个 Loader 返回值给下一个。在最后一个 Loader，返回 webpack 所预期的 JavaScript。</li><li>支持同步和异步<br> Loader 支持同步和异步转换。这意味着 Loader 可以进行一些耗时的操作，例如网络请求</li><li>模块热替换<br> 如果模块在运行时进行更改，Loader 可以将更改的模块发送给运行时，而无需完全重新构建。</li></ul><h5 id="配置-loader-的方式" tabindex="-1">配置 Loader 的方式 <a class="header-anchor" href="#配置-loader-的方式" aria-label="Permalink to &quot;配置 Loader 的方式&quot;">​</a></h5><ul><li>配置方式（推荐）：在 webpack.config.js 文件中指定 loader</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>内联方式：在每个 import 语句中显式指定 loader</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Styles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;style-loader!css-loader?modules!./styles.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>CLI 方式：在 shell 命令中指定它们</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webpack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --module-bind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> js=babel-loader</span></span></code></pre></div><h5 id="常见-loader" tabindex="-1">常见 Loader <a class="header-anchor" href="#常见-loader" aria-label="Permalink to &quot;常见 Loader&quot;">​</a></h5><ul><li><p>style-loader: 将 css 添加到 DOM 的内联样式标签 style 里</p></li><li><p>css-loader :允许将 css 文件通过 require 的方式引入，并返回 css 代码</p></li><li><p>less-loader: 处理 less。将 less 代码转换为 CSS 代码</p></li><li><p>sass-loader: 处理 sass。将 sass 代码转换为 CSS 代码</p></li><li><p>postcss-loader: 用 postcss 来处理 CSS</p></li><li><p>file-loader: 分发文件到 output 目录并返回相对路径</p></li><li><p>url-loader: 和 file-loader 类似，但是当文件小于设定的 limit 时可以返回一个 Data Url</p></li><li><p>html-minify-loader: 压缩 HTML</p></li><li><p>babel-loader :用 babel 来转换 ES6 文件到 ES</p></li></ul><h4 id="plugin" tabindex="-1">Plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;Plugin&quot;">​</a></h4><p>webpack 中的 plugin 赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在 webpack 的不同阶段（钩子 / 生命周期），贯穿了 webpack 整个编译周期 <img src="`+t+`" alt="Plugin"></p><h5 id="plugin-特性" tabindex="-1">Plugin 特性 <a class="header-anchor" href="#plugin-特性" aria-label="Permalink to &quot;Plugin 特性&quot;">​</a></h5><p>其本质是一个具有<code>apply</code>方法<code>javascript</code>对象 <code>apply</code>方法会被 <code>webpack compiler</code>调用，并且在整个编译生命周期都可以访问 <code>compiler</code>对象<br><code>compiler</code>对象代表了 <code>webpack</code> 从启动到关闭的整个生命周期。你可以在 apply 方法内部监听 <code>compiler</code>上的各种事件，并在特定时机执行自定义的行为。</p><h5 id="常见的-plugin" tabindex="-1">常见的 Plugin <a class="header-anchor" href="#常见的-plugin" aria-label="Permalink to &quot;常见的 Plugin&quot;">​</a></h5><ul><li><p>HtmlWebpackPlugin 这个插件会创建一个 HTML 文件，其中包括使用 script 标签的所有 webpack 包。</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 其他配置项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成的 HTML 文件的标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出的 HTML 文件名，默认为 &#39;index.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模板文件路径，插件会根据这个模板生成 HTML 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      inject: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包后的脚本插入到哪个标签中，可选值有 &#39;head&#39; 和 &#39;body&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>配置后，在 <code>html</code> 模板中，可以通过 <code>&lt;%=htmlWebpackPlugin.options.XXX%&gt;</code> 的方式获取配置的值</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--./src/html/index.html--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-UA-Compatible&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ie=edge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%=htmlWebpackPlugin.options.title%&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;html-webpack-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p>clean-webpack-plugin: 这个插件会在每次成功重建后，删除<code>webpack</code> 的 <code>output.path</code>目录中的所有文件。</p></li><li><p>mini-css-extract-plugin：这个插件会将 CSS 提取到单独的文件中。它为每个包含 CSS 的 JS 文件创建一个 CSS 文件。</p></li><li><p>DefinePlugin：允许在编译时创建配置的全局对象，是一个<code>webpack</code>内置的插件</p></li><li><p>copy-webpack-plugin：复制文件或目录到执行区域，如<code>vue</code>的打包过程中，如果我们将一些文件放到<code>public</code>的目录下，那么这个目录会被复制到<code>dist</code>文件夹中</p></li></ul></li></ul><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h3><p>Vite ，是一种新型前端构建工具，能够显著提升前端开发体验</p><h4 id="vite-特点" tabindex="-1">Vite 特点 <a class="header-anchor" href="#vite-特点" aria-label="Permalink to &quot;Vite 特点&quot;">​</a></h4><ol><li><strong>快速冷启动</strong>：Vite 利用原生 ES Modules (ESM) 实现了快速的冷启动，无需等待打包过程。</li><li><strong>即时热更新</strong>：Vite 提供了即时的模块热更新，当你修改文件时，只有被修改的文件会被重新编译和更新，而不是整个应用。</li><li><strong>按需加载</strong>：在浏览器中，只有实际需要的模块才会被加载和执行，这可以减少不必要的网络请求和计算。</li></ol><h4 id="vite-原理" tabindex="-1">Vite 原理 <a class="header-anchor" href="#vite-原理" aria-label="Permalink to &quot;Vite 原理&quot;">​</a></h4><p><img src="`+p+'" alt="Vite原理"> 在热模块 HMR 方面，当修改一个模块的时候，仅需让浏览器重新请求该模块即可，无须像 webpack 那样需要把该模块的相关依赖模块全部编译一次，效率更高</p>',46),r=[k];function d(o,E,c,g,u,y){return a(),s("div",null,r)}const m=i(h,[["render",d]]);export{F as __pageData,m as default};
