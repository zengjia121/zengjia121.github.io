import{_ as s,c as a,o as i,a9 as e}from"./chunks/framework.Dq92XQaD.js";const g=JSON.parse('{"title":"JavaScript的ACM模式","description":"","frontmatter":{"title":"JavaScript的ACM模式","tags":["leetcode","日常刷题"],"categories":["LeetCode"],"date":"2024-05-29T10:54:05.000Z"},"headers":[],"relativePath":"algorithm/LeetcCode/ACM-1.md","filePath":"algorithm/LeetcCode/ACM-1.md","lastUpdated":1718251286000}'),t={name:"algorithm/LeetcCode/ACM-1.md"},n=e(`<h1 id="javascript-的-acm-模式" tabindex="-1">JavaScript 的 ACM 模式 <a class="header-anchor" href="#javascript-的-acm-模式" aria-label="Permalink to &quot;JavaScript 的 ACM 模式&quot;">​</a></h1><h2 id="v8-模式" tabindex="-1">V8 模式 <a class="header-anchor" href="#v8-模式" aria-label="Permalink to &quot;V8 模式&quot;">​</a></h2><h3 id="读取数据" tabindex="-1">读取数据 <a class="header-anchor" href="#读取数据" aria-label="Permalink to &quot;读取数据&quot;">​</a></h3><p>好像有两种，但具体用<code>readline();</code>的比较多...吧？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read_line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="输出" tabindex="-1">输出 <a class="header-anchor" href="#输出" aria-label="Permalink to &quot;输出&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="nodejs-模式" tabindex="-1">Nodejs 模式 <a class="header-anchor" href="#nodejs-模式" aria-label="Permalink to &quot;Nodejs 模式&quot;">​</a></h2><p>输入有三大步骤：</p><ol><li><p>引入 readline 模块</p></li><li><p>调用 readline.createInterface()，创建一个 readline 的接口实例</p></li><li><p>监听 line 事件，事件处理函数的参数就是输入的行</p></li></ol><p>之后的处理都是在<code>function (line)</code>里面进行处理的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;readline&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: process.stdin,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: process.stdout,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,12),l=[n];function h(p,k,r,d,o,c){return i(),a("div",null,l)}const u=s(t,[["render",h]]);export{g as __pageData,u as default};
