import{_ as s,c as i,o as a,a9 as l}from"./chunks/framework.Dq92XQaD.js";const g=JSON.parse('{"title":"回流和重绘","description":"","frontmatter":{"title":"回流和重绘","tags":["面试","CSS"],"categories":[["面试","CSS"]],"date":"2024-05-30T17:20:01.000Z"},"headers":[],"relativePath":"posts/CSS/CSS-4.md","filePath":"posts/CSS/CSS-4.md","lastUpdated":1717080051000}'),t={name:"posts/CSS/CSS-4.md"},n=l(`<h1 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-label="Permalink to &quot;回流和重绘&quot;">​</a></h1><ul><li><a href="#回流和重绘">回流和重绘</a><ul><li><a href="#什么是回流">什么是回流</a></li><li><a href="#什么是重绘">什么是重绘</a></li><li><a href="#回流和重绘会带来什么影响">回流和重绘会带来什么影响</a></li><li><a href="#如何减少回流和重绘">如何减少回流和重绘</a></li></ul></li></ul><ol><li><p>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</p></li><li><p>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</p></li></ol><h2 id="什么是回流" tabindex="-1">什么是回流 <a class="header-anchor" href="#什么是回流" aria-label="Permalink to &quot;什么是回流&quot;">​</a></h2><p>回流，也称为重计算布局<code>（Recompute Layout）</code>，是一种当页面的<strong>部分或全部</strong>的<strong>几何属性</strong>发生改变时，浏览器需要重新计算元素的位置和大小的过程。这通常发生在以下情况：</p><ul><li>页面一开始渲染的时候</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li><li>页面的滚动位置改变</li><li>添加或删除可见的 DOM 元素</li><li>元素的隐藏与现实（改变元素的可视性属性）</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>获取一些特定属性的值的时候也可能触发回流：</p><p><code>offsetTop</code>、<code>offsetLeft</code>、<code> offsetWidth</code>、<code>offsetHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code>、<code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></p><p>这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流</p></div><p>当这些情况发生时，浏览器需要重新计算元素的几何属性，包括位置、尺寸和可见性等。这个过程被称为回流。</p><h2 id="什么是重绘" tabindex="-1">什么是重绘 <a class="header-anchor" href="#什么是重绘" aria-label="Permalink to &quot;什么是重绘&quot;">​</a></h2><p>重绘，也称为重绘渲染树<code>（Redraw Tree）</code>，是一种当元素的外观发生改变时，浏览器需要<strong>重新绘制元素</strong>的过程。<strong>触发回流一定会触发重绘，重绘并不一定会触发回流</strong>，此外还有些行为也会触发重绘:</p><ul><li>颜色的修改</li><li>文本方向的修改</li><li>阴影的修改</li></ul><h2 id="回流和重绘会带来什么影响" tabindex="-1">回流和重绘会带来什么影响 <a class="header-anchor" href="#回流和重绘会带来什么影响" aria-label="Permalink to &quot;回流和重绘会带来什么影响&quot;">​</a></h2><ol><li><p><strong>性能消耗</strong>：回流和重绘都需要浏览器消耗资源来重新计算元素的几何属性或重新绘制元素。如果回流和重绘的次数过多，会导致页面的响应速度变慢，影响用户体验。</p></li><li><p><strong>占用更多的系统资源</strong>：回流和重绘过程中，浏览器需要消耗 CPU 和内存资源。如果回流和重绘的次数过多，可能会导致系统资源占用过高，影响其他应用程序的运行。</p></li><li><p><strong>导致页面闪烁</strong>：频繁的回流和重绘可能会导致页面出现闪烁或者卡顿的现象，影响用户体验。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">浏览器优化机制</p><p>由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列</p><p>当你获取布局信息的操作的时候，会强制队列刷新，包括前面讲到的 offsetTop 等方法都会返回最新的数据</p><p>因此浏览器不得不清空队列，触发回流重绘来返回正确的值</p></div><h2 id="如何减少回流和重绘" tabindex="-1">如何减少回流和重绘 <a class="header-anchor" href="#如何减少回流和重绘" aria-label="Permalink to &quot;如何减少回流和重绘&quot;">​</a></h2><ul><li><p>避免逐项更改样式<br> 不要逐个更改样式，而是通过改变 class，或者使用 cssText 属性一次性更改样式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.style.borderLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.style.borderRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.style.padding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.style.cssText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;border-left: 1px; border-right: 2px; padding: 5px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;active&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><ul><li><p>&quot;离线&quot;更新<br> 设置元素属性 display: none，将其从页面上去掉，然后再进行后续操作，这些后续操作也不会触发回流与重绘</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.style.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;100px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.style.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;200px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.style.border </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;10px solid red&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.style.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;red&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（省略了许多类似的后续操作）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.style.display </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;block&#39;</span></span></code></pre></div></li><li><p>缓存布局信息<br> 如果需要多次使用某个布局属性，考虑将它缓存到一个变量中</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不推荐</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.my-element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).offsetHeight);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.my-element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).offsetHeight;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(height);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>避免使用表格布局<br> 可能很小的一个小改动会导致整个表格的重新布局</p></li></ul><div class="tip custom-block"><p class="custom-block-title">参考链接</p><p><a href="https://juejin.cn/post/6844903942137053192" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903942137053192</a><br><a href="https://segmentfault.com/a/1190000017329980" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000017329980</a></p></div>`,18),e=[n];function h(p,k,r,d,o,E){return a(),i("div",null,e)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
