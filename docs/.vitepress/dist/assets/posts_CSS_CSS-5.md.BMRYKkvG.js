import{_ as o,c as e,o as c,a9 as t}from"./chunks/framework.Dq92XQaD.js";const l="/assets/blog-2024-05-30-22-26-59.fuCLpP9o.png",m=JSON.parse('{"title":"浏览器的渲染机制","description":"","frontmatter":{"title":"浏览器的渲染机制","tags":["面试","CSS"],"categories":[["面试","CSS"]],"abbrlink":"7591b14f","date":"2024-05-30T22:24:52.000Z"},"headers":[],"relativePath":"posts/CSS/CSS-5.md","filePath":"posts/CSS/CSS-5.md","lastUpdated":1717080051000}'),i={name:"posts/CSS/CSS-5.md"},d=t('<h1 id="前端浏览器渲染原理" tabindex="-1">前端浏览器渲染原理 <a class="header-anchor" href="#前端浏览器渲染原理" aria-label="Permalink to &quot;前端浏览器渲染原理&quot;">​</a></h1><p>写在前面：不太好分类，但又不能专开一个浏览器专列，只能先分到这类了</p><h2 id="浏览器内核" tabindex="-1">浏览器内核 <a class="header-anchor" href="#浏览器内核" aria-label="Permalink to &quot;浏览器内核&quot;">​</a></h2><p>浏览器内核主要分成两部分：</p><ul><li><strong>渲染引擎</strong>：渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 <code>html</code>、<code>xml</code> 文档及图片，它也可以借助插件显示其他类型数据，例如使用<code>PDF</code>阅读器插件，可以显示 <code>PDF</code> 格式。</li><li><strong>JS 引擎</strong>：解析和执行<code>javascript</code>来实现网页的动态效果。</li></ul><p>最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来<code>JS</code>引擎越来越独立，内核就倾向于只指渲染引擎。</p><h2 id="浏览器的渲染过程" tabindex="-1">浏览器的渲染过程 <a class="header-anchor" href="#浏览器的渲染过程" aria-label="Permalink to &quot;浏览器的渲染过程&quot;">​</a></h2><p><img src="'+l+'" alt="浏览器的渲染过程"> 具体是以下五个步骤：</p><ol><li><strong>解析 HTML</strong>：浏览器首先解析 HTML 文档，生成 DOM 树。DOM 树是由 HTML 元素组成的树形结构。</li><li><strong>解析 CSS</strong>：浏览器解析 CSS 样式信息，生成 CSSOM 树。CSSOM 树是由 CSS 选择器和样式信息组成的树形结构。</li><li><strong>构建渲染树</strong>：浏览器将 DOM 树和 CSSOM 树合并，生成渲染树。渲染树包含了页面上所有可见元素的样式和内容信息。</li><li><strong>布局</strong>：浏览器根据渲染树计算每个元素的大小和位置，这个过程也被称为“回流”。</li><li><strong>绘制</strong>：浏览器根据布局信息在屏幕上绘制每个元素，这个过程也被称为“重绘”。</li><li><strong>合成</strong>：最后，浏览器将各个层进行合成，然后显示在屏幕上。</li></ol><h2 id="浏览器渲染优化" tabindex="-1">浏览器渲染优化 <a class="header-anchor" href="#浏览器渲染优化" aria-label="Permalink to &quot;浏览器渲染优化&quot;">​</a></h2><h3 id="针对-javascript" tabindex="-1">针对 JavaScript <a class="header-anchor" href="#针对-javascript" aria-label="Permalink to &quot;针对 JavaScript&quot;">​</a></h3><p><code>JavaScript</code>既会阻塞<code>HTML</code>的解析，也会阻塞<code>CSS</code>的解析。因此我们可以对 <code>JavaScript</code>的加载方式进行改变，来进行优化：</p><ul><li>尽量将 JavaScript 文件放在 body 的最后</li><li>body 中间尽量不要写<code>&lt;script&gt;</code>标签</li><li><code>&lt;script&gt;</code>标签的引入资源方式有三种，有一种就是我们常用的直接引入，还有两种就是使用 async 属性和 defer 属性来异步引入，两者都是去异步加载外部的 JS 文件，不会阻塞 DOM 的解析 <strong>（尽量使用异步加载）</strong>。三者的区别如下： <ul><li><code>script</code> <strong>立即停止</strong>页面渲染去加载资源文件，当资源加载完毕后立即执行 js 代码，js 代码执行完毕后继续渲染页面。</li><li><code>async</code>是在下载完成之后，立即异步加载，加载好后立即执行，<strong>多个带 async 属性的标签，不能保证加载的顺序</strong>。</li><li><code>defer</code>是在下载完成之后，立即异步加载。加载好后，如果 DOM 树还没构建好，则先等 DOM 树解析好再执行；如果 DOM 树已经准备好，则立即执行。多个带 defer 属性的标签，<strong>按照顺序执行</strong>。</li></ul></li></ul><h3 id="针对-css" tabindex="-1">针对 CSS <a class="header-anchor" href="#针对-css" aria-label="Permalink to &quot;针对 CSS&quot;">​</a></h3><p><code>css</code>要放在顶部，它不会阻塞<code>html</code>的解析</p><p>使用<code>CSS</code>有三种方式：使用<code>link</code>、<code>@import</code>、内联样式，其中<code>link</code>和<code>@import</code>都是导入外部样式。它们之间的区别：</p><ul><li><code>link</code>：浏览器会派发一个新的线程(HTTP 线程)去加载资源文件，与此同时 GUI 渲染线程会继续向下渲染代码</li><li><code>@import</code>：GUI 渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染(阻碍浏览器渲染)</li><li><code>style</code>：GUI 直接渲染</li></ul><p>外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以<code>CSS</code>一般写在<code>head</code>中，让浏览器尽快发送请求去获取<code>Css</code>样式。</p><p>所以，在开发过程中，导入外部样式使用<code>link</code>，而不用<code>@import</code>。如果<code>css</code>少，尽可能采用内嵌样式，直接写在<code>style</code>标签中</p><div class="tip custom-block"><p class="custom-block-title">style 和 link 的区别</p><p><code>style</code>样式解析:</p><ul><li>由 html 解析器解析</li><li>不会阻塞浏览器渲染，但可能出现闪屏现象</li><li>不会阻塞 DOM 解析</li><li>通过 style 标签引入会一边解析，一边渲染。</li></ul><p><code>link</code>引入:</p><ul><li>link 进来的样式，由 css 解析器去解析，并且是同步解析的。</li><li>css 解析器会阻塞页面的渲染。(link 引入的外部样式会阻塞页面渲染，可以利用这种阻塞避免&quot;闪屏现象&quot;)</li><li>推荐使用 link 引入样式。</li><li>阻塞后面的 js 语句的执行</li></ul></div><h3 id="针对-dom-树、cssom-树" tabindex="-1">针对 DOM 树、CSSOM 树 <a class="header-anchor" href="#针对-dom-树、cssom-树" aria-label="Permalink to &quot;针对 DOM 树、CSSOM 树&quot;">​</a></h3><ul><li>HTML 文件的代码层级尽量不要太深</li><li>使用语义化的标签，来避免不标准语义化的特殊处理（如 <code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code> 等），而不是仅仅使用 <code>&lt;div&gt;</code> 或 <code>&lt;span&gt;</code>。）</li><li>减少 CSSD 代码的层级，因为选择器是从左向右进行解析的（尽可能减少 CSS 选择器的层级）</li></ul>',22),a=[d];function s(r,n,S,p,h,g){return c(),e("div",null,a)}const _=o(i,[["render",s]]);export{m as __pageData,_ as default};
