import{_ as i,c as e,o as t,a9 as a}from"./chunks/framework.Dq92XQaD.js";const o="/assets/blog-2024-05-21-15-19-48.CCpgwPCz.png",l="/assets/blog-2024-05-21-15-34-13.C4PXoKSN.png",b=JSON.parse('{"title":"Git常见指令","description":"","frontmatter":{"title":"Git常见指令","date":"2024-05-21T16:20:44.000Z","tags":["面试","Git"],"categories":[["面试"],"Git"]},"headers":[],"relativePath":"posts/Git/Git-2.md","filePath":"posts/Git/Git-2.md","lastUpdated":1716281569000}'),c={name:"posts/Git/Git-2.md"},d=a(`<h1 id="git-常见指令" tabindex="-1">Git 常见指令 <a class="header-anchor" href="#git-常见指令" aria-label="Permalink to &quot;Git 常见指令&quot;">​</a></h1><ul><li><a href="#git-常见指令">Git 常见指令</a><ul><li><a href="#git-config">git config</a></li><li><a href="#git-启动">git 启动</a></li><li><a href="#常见-git-指令">常见 git 指令</a><ul><li><a href="#文件提交">文件提交</a></li><li><a href="#分支">分支</a></li><li><a href="#合并">合并</a></li><li><a href="#远程同步">远程同步</a></li><li><a href="#撤回">撤回</a></li></ul></li><li><a href="#git-指令速查">Git 指令速查</a></li></ul></li></ul><h2 id="git-config" tabindex="-1">git config <a class="header-anchor" href="#git-config" aria-label="Permalink to &quot;git config&quot;">​</a></h2><p><code>Git</code>自带一个<code>git config</code>的工具来帮助设置控制<code>Git</code> 外观和行为的配置变量<br> 可以使用<code>git config</code>命令来查看或修改<code>Git</code>的配置</p><ul><li><p><code>user.name</code>和<code> user.email</code>：<br> 配置用户名和邮箱，提交时候 Git 使用这些信息标记提交者</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your Name&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your@email.com&quot;</span></span></code></pre></div></li></ul><h2 id="git-启动" tabindex="-1">git 启动 <a class="header-anchor" href="#git-启动" aria-label="Permalink to &quot;git 启动&quot;">​</a></h2><ul><li><p><code>git init [project-name]</code><br> 创建或在当前目录初始化一个<code>git</code>代码库</p></li><li><p><code>git clone url</code><br> 下载一个项目和它的整个代码历史</p></li></ul><h2 id="常见-git-指令" tabindex="-1">常见 git 指令 <a class="header-anchor" href="#常见-git-指令" aria-label="Permalink to &quot;常见 git 指令&quot;">​</a></h2><p><img src="`+o+'" alt="git 指令"></p><h3 id="文件提交" tabindex="-1">文件提交 <a class="header-anchor" href="#文件提交" aria-label="Permalink to &quot;文件提交&quot;">​</a></h3><ul><li><p><code> git add [file]</code>： 将文件添加到暂存区(添加当前目录所有文件 使用<code>.</code>代替 )</p></li><li><p><code>git commit -m &quot;[message]&quot;</code>： 提交暂存区的改动</p></li><li><p><code>git commit -a -m &quot;[message]&quot;</code>： 自动把所有已经跟踪过的文件暂存起来一并提交，跳过<code>git add</code>的步骤</p></li><li><p><code>git push [remote] [branch]</code>： 将本地的改动推送到远程仓库</p></li></ul><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><ul><li><p><code>git branch</code>：列出所有本地分支</p></li><li><p><code>git branch [branch-name]</code>：创建一个新的分支</p></li><li><p><code>git branch -d [branch-name]</code>：删除一个分支</p></li><li><p><code>git checkout [branch-name]</code>：切换到指定的分支</p></li><li><p><code>git checkout -b [branch-name]</code>：创建一个新的分支并立即切换到这个分支</p></li></ul><h3 id="合并" tabindex="-1">合并 <a class="header-anchor" href="#合并" aria-label="Permalink to &quot;合并&quot;">​</a></h3><ul><li><p><code>git pull [remote] [branch]：[branch]</code>： 从远程仓库拉取代码并合并到本地某分支</p></li><li><p><code>git merge [branch-name]</code>：将指定的分支合并到当前分支</p></li><li><p><code>git merge --abort</code>：合并分支出现冲突时，取消合并，一切回到合并前的状态</p></li></ul><h3 id="远程同步" tabindex="-1">远程同步 <a class="header-anchor" href="#远程同步" aria-label="Permalink to &quot;远程同步&quot;">​</a></h3><ul><li><p><code>git fetch origin</code>：下载远程仓库所有新的变动到本地的命令</p></li><li><p><code>git remote -v</code>：显示所有远程仓库，显示其对应的 Fetch 和 Push 地址</p></li><li><p><code>git remote add [shortname] [url]</code>：添加一个新的远程仓库，并为其指定一个简短的别名。</p></li><li><p><code>git remote rm [shortname]</code>：删除一个远程仓库</p></li></ul><h3 id="撤回" tabindex="-1">撤回 <a class="header-anchor" href="#撤回" aria-label="Permalink to &quot;撤回&quot;">​</a></h3><ul><li><p><code>git checkout -- [file]</code>：撤销指定文件的所有本地修改</p></li><li><p><code>git reset --hard</code>：撤销所有未提交的修改（包括工作目录和暂存区的修改），并将 HEAD 指针重置到最近一次的提交</p></li><li><p><code>git reset [commit]</code>：重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</p></li><li><p><code>git revert [commit]</code>：后者的所有变化都将被前者抵消，并且应用到当前分支</p></li></ul><div class="tip custom-block"><p class="custom-block-title"><code>reset</code> 与 <code>revert</code> 区别</p><p><code>reset</code> ：你的文件修改（如果有的话）仍然保留，但是不会被标记为 <code>&quot;staged&quot;</code>。对于取消之前的 <code>git add </code>操作很有用</p><p><code>revert</code> ：创建一个新的 <code>commit</code> ，该 <code>commit</code> 撤销指定 <code>commit</code> 的所有更改。</p></div><h2 id="git-指令速查" tabindex="-1">Git 指令速查 <a class="header-anchor" href="#git-指令速查" aria-label="Permalink to &quot;Git 指令速查&quot;">​</a></h2><p><img src="'+l+'" alt="Git指令速查"></p>',22),s=[d];function r(h,n,p,g,u,m){return t(),e("div",null,s)}const f=i(c,[["render",r]]);export{b as __pageData,f as default};
