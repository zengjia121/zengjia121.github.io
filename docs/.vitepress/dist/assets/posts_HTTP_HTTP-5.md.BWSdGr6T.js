import{_ as e,c as o,o as a,a9 as c}from"./chunks/framework.G_nFLsES.js";const d="/assets/blog-2024-04-12-11-32-05.Ccdp0FeQ.png",t="/assets/blog-2024-04-12-11-43-59.BUl8p8aH.png",P=JSON.parse('{"title":"TCP的三次握手和四次挥手","description":"","frontmatter":{"title":"TCP的三次握手和四次挥手","abbrlink":"c1106820","date":"2024-04-11T22:10:29.000Z","tags":["面试","HTTP"],"categories":[["面试","HTTP"]]},"headers":[],"relativePath":"posts/HTTP/HTTP-5.md","filePath":"posts/HTTP/HTTP-5.md","lastUpdated":1715952728000}'),r={name:"posts/HTTP/HTTP-5.md"},l=c('<h1 id="tcp-的三次握手和四次挥手" tabindex="-1">TCP 的三次握手和四次挥手 <a class="header-anchor" href="#tcp-的三次握手和四次挥手" aria-label="Permalink to &quot;TCP 的三次握手和四次挥手&quot;">​</a></h1><ul><li><a href="#tcp-的三次握手和四次挥手">TCP 的三次握手和四次挥手</a><ul><li><a href="#三次握手">三次握手</a><ul><li><a href="#具体过程">具体过程</a></li><li><a href="#为什么不是两次握手">为什么不是两次握手</a></li></ul></li><li><a href="#四次挥手">四次挥手</a><ul><li><a href="#具体过程-1">具体过程</a></li></ul></li><li><a href="#四次挥手原因">四次挥手原因</a></li></ul></li></ul><h2 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h2><p>三次握手（Three-way Handshake）其实就是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包 <strong>主要作用</strong>：确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备</p><h3 id="具体过程" tabindex="-1">具体过程 <a class="header-anchor" href="#具体过程" aria-label="Permalink to &quot;具体过程&quot;">​</a></h3><ul><li><p><strong>第一次握手</strong>：客户端给服务端发一个 <code>SYN</code> 报文，并指明客户端的初始化序列号 <code>ISN(c)</code>，此时客户端处于 <code>SYN_SENT</code> 状态<br><strong>握手作用</strong>：客户端发送网络包，服务端收到了 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</p></li><li><p><strong>第二次握手</strong>: 服务器收到客户端的 <code>SYN</code> 报文之后，会以自己的 <code>SYN</code> 报文作为应答，为了确认客户端的 <code>SYN</code>，将客户端的 <code>ISN+1</code> 作为 <code>ACK</code> 的值，此时服务器处于 <code>SYN_RCVD</code> 的状态<br><strong>握手作用</strong>：服务端发包，客户端收到了。客户端能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常</p></li><li><p><strong>第三次握手</strong>：客户端收到 <code>SYN</code> 报文之后，会发送一个 <code>ACK</code> 报文，值为服务器的<code>ISN+1</code>。此时客户端处于 <code>ESTABLISHED</code> 状态。服务器收到 <code>ACK</code> 报文之后，也处于 <code>ESTABLISHED</code> 状态，此时，双方已建立起了连接<br><strong>握手作用</strong>：客户端发包，服务端收到了。 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常</p><p><img src="'+d+'" alt="三次握手图示"></p></li></ul><h3 id="为什么不是两次握手" tabindex="-1">为什么不是两次握手 <a class="header-anchor" href="#为什么不是两次握手" aria-label="Permalink to &quot;为什么不是两次握手&quot;">​</a></h3><p>如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到</p><p>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</p><h2 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h2><p><code>tcp</code>终止一个连接，需要经过四次挥手</p><h3 id="具体过程-1" tabindex="-1">具体过程 <a class="header-anchor" href="#具体过程-1" aria-label="Permalink to &quot;具体过程&quot;">​</a></h3><ul><li><p><strong>第一次挥手</strong>：客户端发送一个 <code>FIN</code> 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态，停止发送数据，等待服务端的确认</p></li><li><p><strong>第二次挥手</strong>：服务端收到 <code>FIN</code> 之后，会发送 <code>ACK</code> 报文，且把客户端的序列号值 +1 作为 <code>ACK</code> 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于<code>CLOSE_WAIT</code>状态</p></li><li><p><strong>第三次挥手</strong>：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 <code>FIN</code> 报文，且指定一个序列号。此时服务端处于<code>LAST_ACK</code> 的状态</p></li><li><p><strong>第四次挥手</strong>：客户端收到 <code>FIN</code> 之后，一样发送一个 <code>ACK</code> 报文作为应答，且把服务端的序列号值 +1 作为自己 <code>ACK</code> 报文的序列号值，此时客户端处于 <code>TIME_WAIT</code>态。需要过一阵子以确保服务端收到自己的 <code>ACK</code> 报文之后才会进入 <code>CLOSED</code> 状态，服务端收到 <code>ACK</code> 报文之后，就处于关闭连接了，处于 <code>CLOSED</code> 状态</p><p><img src="'+t+'" alt="四次挥手图示"></p></li></ul><h2 id="四次挥手原因" tabindex="-1">四次挥手原因 <a class="header-anchor" href="#四次挥手原因" aria-label="Permalink to &quot;四次挥手原因&quot;">​</a></h2><p>服务端在收到客户端断开连接<code>Fin</code>报文后，并不会立即关闭连接，而是先发送一个<code>ACK</code>包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送<code>FIN</code>报文断开连接，因此需要四次挥手</p>',15),s=[l];function i(n,p,h,T,_,g){return a(),o("div",null,s)}const C=e(r,[["render",i]]);export{P as __pageData,C as default};
