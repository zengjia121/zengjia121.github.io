import{_ as s,c as i,o as a,a9 as n}from"./chunks/framework.G_nFLsES.js";const t="/assets/blog-2024-03-24-17-22-11.CUl48Qvp.png",l="/assets/blog-2024-03-24-17-33-32.7z4CiVrT.png",h="/assets/blog-2024-03-24-17-50-31.Bphc_T4g.png",u=JSON.parse('{"title":"JavaScript的事件循环机制","description":"","frontmatter":{"title":"JavaScript的事件循环机制","tags":["面试","JavaScript"],"categories":[["面试","JavaScript"]],"abbrlink":"bd91be9b","date":"2024-03-24T16:51:40.000Z"},"headers":[],"relativePath":"posts/JavaScript/JavaScript-1.md","filePath":"posts/JavaScript/JavaScript-1.md","lastUpdated":1715952728000}'),k={name:"posts/JavaScript/JavaScript-1.md"},p=n('<h1 id="javascript-的事件循环机制与宏任务和微任务" tabindex="-1">JavaScript 的事件循环机制与宏任务和微任务 <a class="header-anchor" href="#javascript-的事件循环机制与宏任务和微任务" aria-label="Permalink to &quot;JavaScript 的事件循环机制与宏任务和微任务&quot;">​</a></h1><ul><li><a href="#javascript的事件循环机制与宏任务和微任务">JavaScript 的事件循环机制与宏任务和微任务</a><ul><li><a href="#javascript的特点----单线程">JavaScript 的特点 -- 单线程</a></li><li><a href="#js如何解决单线程阻塞问题----同步任务与异步任务">JS 如何解决单线程阻塞问题 -- 同步任务与异步任务</a></li><li><a href="#宏任务与微任务">宏任务与微任务</a></li><li><a href="#宏任务微任务执行顺序----先同步再异步异步中先微任务再宏任务">宏任务微任务执行顺序 -- 先同步再异步，异步中先微任务，再宏任务</a></li><li><a href="#async与await">async 与 await</a><ul><li><a href="#async">async</a></li><li><a href="#await">await</a></li></ul></li><li><a href="#promise对象">Promise 对象</a></li><li><a href="#一些示例题目">一些示例题目</a><ul><li><a href="#示例1">示例 1：</a></li><li><a href="#示例2">示例 2：</a></li><li><a href="#示例3">示例 3：</a></li></ul></li><li><a href="#奇怪的知识点">奇怪的知识点</a></li><li><a href="#参考">参考</a></li></ul></li></ul><h2 id="javascript-的特点-单线程" tabindex="-1">JavaScript 的特点 -- 单线程 <a class="header-anchor" href="#javascript-的特点-单线程" aria-label="Permalink to &quot;JavaScript 的特点 -- 单线程&quot;">​</a></h2><p>JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>因此，JavaScript 语言的一大特点就是<strong>单线程</strong>，即同一个时间只能做一件事。</p><h2 id="js-如何解决单线程阻塞问题-同步任务与异步任务" tabindex="-1">JS 如何解决单线程阻塞问题 -- 同步任务与异步任务 <a class="header-anchor" href="#js-如何解决单线程阻塞问题-同步任务与异步任务" aria-label="Permalink to &quot;JS 如何解决单线程阻塞问题 -- 同步任务与异步任务&quot;">​</a></h2><p>因为浏览器是多线程的，当 JS 需要执行异步任务时，<strong>浏览器会另外启动一个线程去执行该任务</strong>。</p><p>“JS 是单线程的”指的是执行 JS 代码的线程只有一个，是浏览器提供的 JS 引擎线程（主线程）。 浏览器中还有定时器线程和 HTTP 请求线程等，这些线程主要不是来跑 JS 代码的。</p><p>JS 中任务可以分为：</p><ul><li>同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务</li><li>异步任务：不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行</li></ul><p>同步异步的运行流程： <img src="'+t+'" alt="同步异步运行流程"></p><p>同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就事件循环</p><h2 id="宏任务与微任务" tabindex="-1">宏任务与微任务 <a class="header-anchor" href="#宏任务与微任务" aria-label="Permalink to &quot;宏任务与微任务&quot;">​</a></h2><p>单纯将事件分为同步和异步并不准确，还要将异步任务区分为宏任务与微任务 <img src="'+l+'" alt="JS中的任务分类"></p><ul><li>宏任务：是指在当前执行栈执行完毕后立即执行的任务。由<strong>宿主（浏览器、Node）发起的</strong>，<strong>进程的切换定是宏任务，因为需要花费大量的资源</strong><ul><li><code>script</code>标签中的代码</li><li><code>setTimeou</code>t：在指定的延时之后执行一个函数或指定的代码块</li><li><code>setInterval</code>：按照指定的时间间隔重复执行一个函数或指定的代码块</li><li><code>setImmediate</code>：在 Node.js 环境中，此方法用于在当前事件循环结束后执行一个脚本，这个 API 不属于 JavaScript 规范，但在 Node.js 中被实现</li><li><code>requestAnimationFrame</code>：浏览器特有的 API，用于在下次重绘之前执行动画相关的代码</li><li>I/O 操作：如文件读写、网络请求等，在完成操作后，其回调函数被加入到宏任务队列中</li><li>UI 渲染：浏览器环境中的 UI 渲染通常也被视为宏任务，浏览器会在合适的时机对页面进行渲染</li></ul></li><li>微任务：是在当前任务结束后立即执行的任务，但是在下一个宏任务开始之前。由<strong>JS 引擎发起的</strong>，线程的切换是微任务，因为只需要在同一个进程中切换就行 <ul><li><code>Promise</code>的回调：包括<code>.then、.catch</code>和<code>.finally</code>方法提供的回调函数</li><li><code>MutationObserver的</code>回调：一个浏览器 API，用于监视 DOM 变更，当 DOM 变化时触发的回调函数作为微任务执行</li><li><code>process.nextTick</code>：这是 Node.js 特有的 API，用于将回调函数放到事件循环的下一个迭代中尽可能早地执行</li><li><code>queueMicrotask</code>：这是一个允许开发者将函数显式加入到微任务队列中的方法，使得它在当前宏任务完成后、下一轮宏任务开始前执行</li></ul></li></ul><h2 id="宏任务微任务执行顺序-先同步再异步-异步中先微任务-再宏任务" tabindex="-1">宏任务微任务执行顺序 -- 先同步再异步，异步中先微任务，再宏任务 <a class="header-anchor" href="#宏任务微任务执行顺序-先同步再异步-异步中先微任务-再宏任务" aria-label="Permalink to &quot;宏任务微任务执行顺序 -- 先同步再异步，异步中先微任务，再宏任务&quot;">​</a></h2><ul><li>执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中</li><li>当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完</li></ul><p><img src="'+h+`" alt="宏任务微任务执行顺序"></p><p>更详细的执行流程：</p><ol><li><strong>JavaScript 引擎开始执行脚本</strong><br> 当 JavaScript 引擎开始执行脚本时，它首先会<strong>处理整个脚本作为一个宏任务</strong>。这包括变量声明、函数声明以及同步执行的代码。</li><li><strong>执行宏任务</strong><br> 在当前宏任务执行期间，可以进行异步操作，如设置 setTimeout、setInterval、发起异步请求等。 这些操作将相应的回调函数排队为新的宏任务，它们将在当前宏任务完成后的将来某个时间点执行。</li><li><strong>宏任务执行完成</strong> 一旦当前宏任务 <strong>包括同步代码和该宏任务中产生的同步代码</strong> 执行完成，JavaScript 引擎会查看是否有微任务需要执行</li><li><strong>执行所有微任务</strong> 在进入下一个宏任务之前，JavaScript 引擎会处理所有的微任务队列。<strong>如果执行微任务期间产生了更多的微任务，这些新的微任务也会被添加到队列中并在这个阶段执行，直到微任务队列为空。</strong></li><li><strong>渲染 UI（如果需要）</strong></li><li><strong>开始下一个宏任务</strong></li></ol><h2 id="async-与-await" tabindex="-1">async 与 await <a class="header-anchor" href="#async-与-await" aria-label="Permalink to &quot;async 与 await&quot;">​</a></h2><p>async 是异步的意思，await 则可以理解为 async wait。所以可以理解 async 就是用来声明一个异步方法，而 await 是用来等待异步方法执行</p><h2 id="async" tabindex="-1">async <a class="header-anchor" href="#async" aria-label="Permalink to &quot;async&quot;">​</a></h2><p>async 函数返回一个 promise 对象，下面两种方法是等效的</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TEST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// asyncF is equivalent to f!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;TEST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="await" tabindex="-1">await <a class="header-anchor" href="#await" aria-label="Permalink to &quot;await&quot;">​</a></h2><ol><li>正常情况下，<strong>await 命令后面是一个 Promise 对象</strong>，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值</li><li>不管 await 后面跟着的是什么，await 都会阻塞后面的代码</li></ol><h2 id="promise-对象" tabindex="-1">Promise 对象 <a class="header-anchor" href="#promise-对象" aria-label="Permalink to &quot;Promise 对象&quot;">​</a></h2><p><code>Promise</code> 是 JavaScript 中的一个对象，用于处理异步操作。它代表了一个最终可能会完成（resolve）或者失败（reject）的操作，以及其结果值。<br> Promise 对象处于以下三种状态之一：</p><ul><li>Pending（待定）：初始状态，既不是成功，也不是失败状态。</li><li>Fulfilled（已成功）：表示操作成功完成。</li><li>Rejected（已失败）：表示操作失败。 Promise 对象是一个返回值，这个返回值在 Promise 被创建时可能是未知的。它允许你<strong>将异步操作的处理程序附加到成功或失败的结果上</strong>，而不是立即返回最终值</li></ul><p>创建<code>Promise</code> 对象,可以使用<code>.then</code>方法来安排当<code>Promise</code>成功时的回调函数，或者使用 <code>.catch </code>方法来安排当<code>Promise</code>失败时的回调函数。 示例：</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> promise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这里是异步操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> operationSuccessful </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设操作成功</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (operationSuccessful) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Operation was successful.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 成功时调用 resolve 并传入结果值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;There was an error.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 失败时调用 reject 并传入错误信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 当 Promise 成功时，这个函数会被调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Success:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 当 Promise 失败时，这个函数会被调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div><h2 id="一些示例题目" tabindex="-1">一些示例题目 <a class="header-anchor" href="#一些示例题目" aria-label="Permalink to &quot;一些示例题目&quot;">​</a></h2><h2 id="示例-1" tabindex="-1">示例 1： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1：&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步宏任务promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步微任务then&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步宏任务&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;同步宏任务promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;同步微任务then&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;同步宏任务&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>代码输出:</li></ul><table><thead><tr><th>输出顺序</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td>同步宏任务 promise</td></tr><tr><td>2</td><td>同步宏任务</td></tr><tr><td>3</td><td>同步微任务 then</td></tr><tr><td>4</td><td>异步宏任务 promise</td></tr><tr><td>5</td><td>异步宏任务</td></tr><tr><td>6</td><td>异步微任务 then</td></tr></tbody></table><ul><li>代码解析：</li></ul><ol><li>执行同步代码。<strong>new Promise 是同步执行的</strong>，所以 &quot;同步宏任务 promise&quot; 和 &quot;同步宏任务&quot; 会首先打印出来。</li><li>执行微任务队列中的任务。Promise.then 是微任务，所以 &quot;同步微任务 then&quot; 会接着打印出来。</li><li>执行下一个宏任务。setTimeout 的回调函数是宏任务，所以 &quot;异步宏任务 promise&quot; 和 &quot;异步宏任务&quot; 会接着打印出来。</li><li>执行微任务队列中的任务。Promise.then 是微任务，所以 &quot;异步微任务 then&quot; 会最后打印出来。</li></ol><h2 id="示例-2" tabindex="-1">示例 2： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2：&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步1任务time1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步1宏任务promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步1任务time2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步1微任务then&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;主线程宏任务&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;异步2任务time2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;宏任务promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // reject();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;微任务then&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;微任务catch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;主线程宏任务2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>代码输出:</li></ul><table><thead><tr><th>输出顺序</th><th>输出内容</th></tr></thead><tbody><tr><td>1</td><td>主线程宏任务</td></tr><tr><td>2</td><td>宏任务 promise</td></tr><tr><td>3</td><td>主线程宏任务 2</td></tr><tr><td>4</td><td>微任务 then</td></tr><tr><td>5</td><td>异步 1 任务 time1</td></tr><tr><td>6</td><td>异步 1 宏任务 promise</td></tr><tr><td>7</td><td>异步 1 微任务 then</td></tr><tr><td>8</td><td>异步 2 任务 time2</td></tr><tr><td>9</td><td>异步 1 任务 time2</td></tr></tbody></table><ul><li>代码解析：</li></ul><ol><li>执行同步代码。console.log(&#39;主线程宏任务&#39;)、console.log(&#39;宏任务 promise&#39;) 和 console.log(&#39;主线程宏任务 2&#39;) 是同步执行的。</li><li>执行微任务队列中的任务。Promise.then 是微任务，所以 &quot;微任务 then&quot; 会接着打印出来。</li><li>执行下一个宏任务。setTimeout 的回调函数是宏任务，所以 &quot;异步 1 任务 time1&quot; 和 &quot;异步 1 宏任务 promise&quot; 会接着打印出来。</li><li>执行下一个宏任务。setTimeout 的回调函数是宏任务，所以 &quot;异步 2 任务 time2&quot; 会接着打印出来。</li><li>执行微任务队列中的任务。Promise.then 是微任务，所以 &quot;异步 1 微任务 then&quot; 会接着打印出来。</li><li>执行下一个宏任务。setTimeout 的回调函数是宏任务，所以 &quot;异步 1 任务 time2&quot; 会最后打印出来。</li></ol><h2 id="示例-3" tabindex="-1">示例 3： <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例 3：&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//代码1：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印出 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//代码2：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印出 0 到 9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>代码解析：</li></ul><ol><li>使用 var 声明的 i 是<strong>全局作用域或函数作用域（在这个例子中是全局作用域）</strong>。当 setTimeout 的回调函数在一秒后执行时，for 循环已经完成，i 的值已经变成了 10。所以，这段代码会打印出十个 10。</li><li>使用 let 声明的 i 是<strong>块级作用域</strong>。每次迭代 for 循环时，都会创建一个新的 i 变量，这个变量只在当前的循环迭代中有效。所以，当 setTimeout 的回调函数在一秒后执行时，它会记住它所在的循环迭代中 i 的值。这段代码会按顺序打印出 0 到 9。</li></ol><h2 id="奇怪的知识点" tabindex="-1">奇怪的知识点 <a class="header-anchor" href="#奇怪的知识点" aria-label="Permalink to &quot;奇怪的知识点&quot;">​</a></h2><ul><li><p>ajax 请求本身不是宏任务或微任务，它是一个异步操作。当你发送一个 ajax 请求时，它会在后台运行，不会阻塞当前的 JavaScript 执行</p></li><li><p>axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js。当你使用 axios 发送请求时，它返回一个 Promise 对象。</p></li><li><p>Promise 对象本身并不是宏任务或微任务，但它的 .then() 或 .catch() 方法中的回调函数会被添加到微任务队列中，等待当前宏任务完成后立即执行。</p></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://blog.csdn.net/qq_63534905/article/details/127789918" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_63534905/article/details/127789918</a><a href="https://zhuanlan.zhihu.com/p/580956436" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/580956436</a><br><a href="https://vue3js.cn/interview/JavaScript/event_loop.html" target="_blank" rel="noreferrer">https://vue3js.cn/interview/JavaScript/event_loop.html</a></p>`,53),e=[p];function E(r,d,o,g,c,y){return a(),i("div",null,e)}const m=s(k,[["render",E]]);export{u as __pageData,m as default};
